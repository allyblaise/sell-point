/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sellPoint;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.geom.Line2D;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTable;
import javax.swing.ListModel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Allyblaise
 */
public class SellsList extends javax.swing.JDialog implements Printable {

    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    String strdateFormat = "yyyy-MM-dd";
    MainWindow logWriter;
    TableRowSorter sorter;
    List<product> productlist;
    List products;
    DefaultListModel<String> model;
    public static String uname;
    Double total = 0D;
    ArrayList<String> bill = new ArrayList<>();

    /**
     * Creates new form SellsList
     */
    public SellsList(java.awt.Frame parent, boolean modal, String username) {
        super(parent, modal);
        initComponents();
        conn = new Db().connectDb();
        this.uname = username;
        logWriter = new MainWindow(username);
        productlist = new ArrayList<product>();
        productlist.clear();
        populateDates();
        products = new ArrayList<String>();
        products.clear();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btncancel = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btncancelsell = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistcart = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        lbltotal = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnbill = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbodate = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Sell list");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        btncancel.setBackground(new java.awt.Color(255, 0, 51));
        btncancel.setText("Close");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selling cart", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Century Gothic", 1, 14))); // NOI18N

        btncancelsell.setText("Cancel sells");
        btncancelsell.setEnabled(false);
        btncancelsell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelsellActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jlistcart);

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel7.setText("Total amount:");

        lbltotal.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        lbltotal.setText("0 Rwf");

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel1.setText("Note: Sells only cancelled by owner (who sold it) only");

        btnbill.setText("Print Bill");
        btnbill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(lbltotal, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnbill)
                        .addGap(10, 10, 10)
                        .addComponent(btncancelsell, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btncancelsell, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(lbltotal)
                    .addComponent(btnbill))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jLabel6.setText("Choose Date:");

        cmbodate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbodateItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbodate, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btncancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btncancel)
                    .addComponent(jLabel6)
                    .addComponent(cmbodate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btncancelsellActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
        int id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        double cred = Double.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        String password = getPasswordfield();
        if (password != null) {
            if (checkPassword(uname, password)) {
                try {
                    String sql = "delete from vente where id=?";
                    ps = conn.prepareStatement(sql);
                    ps.setInt(1, id);
                    if (ps.executeUpdate() >= 0) {
                        for (product p : productlist) {
                            System.out.println("product: " + p.getProduct() + " quantity: " + p.getQuantity());
                            updateStock(p.getProduct(), p.getQuantity());
                        }
                        clearVente(id);
                        updateCaisse(cred);
                        JOptionPane.showMessageDialog(null, "Sell Cancelled");
                        dispose();
                    }
                    ps.close();
                } catch (SQLException ex) {
                    logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
                    Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Password error", "Password", JOptionPane.ERROR_MESSAGE);
            }
        }

    }                                             

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        Calendar c = Calendar.getInstance();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        int id = Integer.parseInt(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        String client = jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString();
        String operator = jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString();
        String total1 = jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString();
        String credit = jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString();

        try {
            ps = conn.prepareStatement("select * from vente_details where vente=?");
            ps.setInt(1, id);
            rs = ps.executeQuery();
            model = new DefaultListModel<>();
            total = 0D;
            bill.clear();
            bill.add("Standard Supply Ltd \r\n");
            bill.add("Tel: 0788492938\r\n");
            bill.add("**************************\r\n");
            bill.add("\r\n");
            bill.add("Date: " + cmbodate.getSelectedItem().toString() + "\r\n");
            bill.add("Client: " + client + "\r\n");
            bill.add("Operator: " + operator + "\r\n");
            bill.add("Credit: " + credit + "\r\n \r\n");
            bill.add("Items: \r\n");
            bill.add("----------------------------------------------- \r\n");
            int a = 1;
            while (rs.next()) {
                total = total + rs.getDouble(4);
                productlist.add(new product(rs.getString(2), rs.getFloat(3), rs.getDouble(4)));
                model.addElement(rs.getString(2) + " | " + rs.getString(3) + " | " + rs.getString(4));
                bill.add(a + ". " + rs.getString(2) + " | " + rs.getString(3) + " | " + rs.getString(4) + "Rwf\r\n");
                a++;
            }
            bill.add("----------------------------------------------- \r\n");
            bill.add("Total: " + thousands(total) + " \r\n");
            bill.add("\r\n");
            bill.add("\r\n");
            bill.add("printed on "+df.format(c.getTime())+" \r\n");
            bill.add("========== Thank you ==========\r\n");
            bill.add("\r\n");
            lbltotal.setText(thousands(total));
            jlistcart.setModel(model);
            System.out.println("username " + uname);
            if (operator.equals(uname)) {
                btncancelsell.setEnabled(true);
            } else {
                btncancelsell.setEnabled(false);
            }
            btnbill.setEnabled(true);
            rs.close();
            ps.close();
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }

    }                                    

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        this.dispose();
    }                                         

    private void cmbodateItemStateChanged(java.awt.event.ItemEvent evt) {                                          
        // TODO add your handling code here:
        populateSells();
    }                                         

    private void btnbillActionPerformed(java.awt.event.ActionEvent evt) {                                        
        /*
         try {
         // TODO add your handling code here:
         PageFormat pf = new PageFormat();
         pf.setOrientation(PageFormat.PORTRAIT);
         Paper pp = new Paper();
         pp.setSize(80, 0);
         pf.setPaper(pp);
         txtbill.print();
         PrintReceipt();
         } catch (PrinterException ex) {
         Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
         JOptionPane.showMessageDialog(null, "Printing error");
         }*/
        PrintReceipt();
    }                                       

    public void PrintReceipt() {
        // find the printService of name printerName
        PrinterJob job = PrinterJob.getPrinterJob();
        PageFormat pf = job.defaultPage();
        double margin = 1.0;
        Paper paper = new Paper();
        paper.setSize(9 * 72.0, (double) (paper.getHeight() + 1 * 10.0));
        paper.setImageableArea(margin, margin, paper.getWidth() - margin * 2, paper.getHeight() - margin * 2);
        pf.setPaper(paper);
        pf.setOrientation(PageFormat.PORTRAIT);
        job.setPrintable(this, pf);
        try {
            job.print();
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null, "Printing Failed,\r\n"+ex.getMessage(), "Printing error", JOptionPane.WARNING_MESSAGE);
            logWriter.writeLog("Printing Failed Try Again on"+Calendar.getInstance().getTime()+": "+ex.getMessage(), SellsList.class.getSimpleName());
            System.out.println("Printing Failed Try Again"+ex.getMessage());
        }

    }

    private void updateCaisse(double credit) {
        try {
            String sql = "update printing set amount=(amount-?) where datee='2000-01-01'";
            PreparedStatement px = conn.prepareStatement(sql);
            px.setDouble(1, total - credit);
            if (px.executeUpdate() >= 0) {
                px.close();
            }

        } catch (SQLException ex) {
            Logger.getLogger(stock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateSells() {
        try {
            ResultSet rs3 = null;
            PreparedStatement ps3 = conn.prepareStatement("select id,client,operator,total_price as price,credit from vente where date=?");
            ps3.setString(1, cmbodate.getSelectedItem().toString());
            //ps3.setString(1, "2016-10-23");
            rs3 = ps3.executeQuery();
            TableModel model = DbUtils.resultSetToTableModel(rs3);
            jTable1.setModel(model);
            btncancelsell.setEnabled(false);
            btnbill.setEnabled(false);
            lbltotal.setText(thousands(0D));
            rs3.close();
            ps3.close();
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void populateDates() {
        try {
            ResultSet rs5 = null;
            PreparedStatement ps5 = conn.prepareStatement("select date from vente group by date  order by date desc");
            rs5 = ps5.executeQuery();
            cmbodate.removeAllItems();
            boolean isdata = false;
            while (rs5.next()) {
                cmbodate.addItem(rs5.getString(1));
                isdata = true;
            }
            if (isdata) {
                populateSells();
            } else {
                JOptionPane.showMessageDialog(null, "No sells available", "Sells", JOptionPane.WARNING_MESSAGE);
                cmbodate.setEnabled(false);
                jTable1.setEnabled(false);
            }
            rs5.close();
            ps5.close();
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String getPasswordfield() {
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Enter a password:");
        JPasswordField pass = new JPasswordField(10);
        panel.add(label);
        panel.add(pass);
        String[] options = new String[]{"OK", "Cancel"};
        int option = JOptionPane.showOptionDialog(null, panel, "Confirm sell cancelling",
                JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options, options[1]);
        if (option == 0) // pressing OK button
        {
            char[] password = pass.getPassword();
            return new String(password);
        }
        return null;
    }

    private Boolean checkPassword(String username, String password) {
        try {
            String sql = "select * from users where username=?  AND password=?";
            ps = conn.prepareStatement(sql);
            ps.setString(1, username);
            ps.setString(2, md5(password));
            rs = ps.executeQuery();
            if (rs.next()) {
                rs.close();
                ps.close();
                return Boolean.TRUE;
            } else {
                rs.close();
                ps.close();
                return Boolean.FALSE;
            }
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), achat.class.getSimpleName());
            Logger.getLogger(Vente.class.getName()).log(Level.SEVERE, null, ex);
            return Boolean.FALSE;
        }
    }

    private String md5(String value) {
        try {
            String plaintext = value;
            MessageDigest m = MessageDigest.getInstance("MD5");
            m.reset();
            m.update(plaintext.getBytes());
            byte[] digest = m.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            // Now we need to zero pad it if you actually want the full 32 chars.
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "000";
    }

    private String thousands(Double value) {
        return NumberFormat.getNumberInstance(Locale.US).format(value) + " Rwf";
    }

    private String getDateString(Date dt) {
        DateFormat df = new SimpleDateFormat(strdateFormat);
        return df.format(dt);
    }

    private boolean updateStock(String product, float quantity) {
        try {
            String sql = "update stock set quantity=(quantity+?) where name=?";
            ps = conn.prepareStatement(sql);
            ps.setFloat(1, quantity);
            ps.setString(2, product);
            if (ps.executeUpdate() >= 0) {
                ps.close();
                return true;
            }
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private void clearVente(int id) {
        try {
            String sql = "delete from vente_details where vente=?";
            ps = conn.prepareStatement(sql);
            ps.setInt(1, id);
            ps.executeUpdate();
            ps.close();
        } catch (SQLException ex) {
            logWriter.writeLog(ex.getMessage(), SellsList.class.getSimpleName());
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SellsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SellsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SellsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SellsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SellsList dialog = new SellsList(new javax.swing.JFrame(), true, uname);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnbill;
    private javax.swing.JButton btncancel;
    private javax.swing.JButton btncancelsell;
    private javax.swing.JComboBox cmbodate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JList jlistcart;
    private javax.swing.JLabel lbltotal;
    // End of variables declaration                   

    @Override
    public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
        if (page > 0) { /* We have only one page, and 'page' is zero-based */

            return NO_SUCH_PAGE;
        }

        /*
         * User (0,0) is typically outside the imageable area, so we must
         * translate by the X and Y values in the PageFormat to avoid clipping
         */
        Graphics2D g2d = (Graphics2D) g;
        g2d.translate(pf.getImageableX(), pf.getImageableY());
        /* Now we perform our rendering */
        Image img = null;
        try {
            img = Toolkit.getDefaultToolkit().getImage(new URL("https://image.freepik.com/free-icon/call-volume-ios-7-interface-symbol_318-35379.jpg"));
        } catch (MalformedURLException ex) {
            Logger.getLogger(SellsList.class.getName()).log(Level.SEVERE, null, ex);
        }
        //g.setFont(new Font("Algerian", 0, 12));
        //g.drawString("Hello world !", 0, 10);
        g.setFont(new java.awt.Font("Century Gothic", 1, 11));
        int a = 1;
        for(String lines:bill){
            if(a<=2){
                g.setFont(new java.awt.Font("Century Gothic", 1, 12));
            }else if(a+2==bill.size()){
                g.setFont(new java.awt.Font("Calibri", 1, 8));
            }else{
                g.setFont(new java.awt.Font("Calibri", 1, 10));
            }
            g.drawString(lines, 10, (a*15));
            a++;
        }
        
        
        //g.drawString("Hello world !", 0, 60);

        return PAGE_EXISTS;
    }
}
